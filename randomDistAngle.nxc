#define CR IN_1
#define LR IN_2
#define TCH1 IN_3
#define TCH2 IN_4 // 센서 포트 지정

#define MA OUT_A
#define MB OUT_B
#define MC OUT_C
#define MAC OUT_AC // 모터 포트 지정

#define Angle MotorRotationCount(MB) // 센서 팔 모터의 회전 각도 업데이트
#define RevAngle MotorRotationCount(MAC) // 주행 모터의 회전 각도 업데이트

#define BLACK 1
#define BLUE 2
#define RED 5
#define WHITE 6 // 색깔 이름 지정

#define armPower 40
#define rtnArmPower 20 // 센서 팔 구동 파워 설정

int degree, revAngle, distance = 0, redDistance;
int ColorShiftStart, ColorShiftEnd, CurrerentColor, color;
int revStart, revEnd;
bool turnDir, redFound = false;

sub InitalSet() // 초기 설정 서브루틴
{
  SetSensorColorFull(CR);
  SetSensorType(LR, IN_TYPE_LIGHT_ACTIVE);
  SetSensorTouch(TCH1);
  SetSensorTouch(TCH2); // 센서 사용 설정

  TextOut(0, 0, "Turn Dir?"); // 회전 방향 설정
  while(1)
  {
    if(ButtonPressed(BTNRIGHT) == true)
    {
      turnDir = true;
      TextOut(0, 0, "Turn Dir : RIGHT");
      break;
    }
    if(ButtonPressed(BTNLEFT) == true)
    {
      TextOut(0, 0, "Turn Dir : LEFT");
      break;
    }
  }
  TextOut(0, 0, "RDY to go");
  until(ButtonPressed(BTNCENTER));

  Wait(500);
  degree = Angle;
}

sub ReturnToBase() // 집 귀환 서브루틴
{
  while(1)
  {
      //RotateMotorEx(MAC, 40, 200, 0, 1, 1);

      revStart = revAngle = RevAngle; // 후진 개시 직전 바퀴 각도 갱신
      while(revAngle <= revStart + 200) // 초기 각도에서 200도 회전할 때까지
      {
        revAngle = RevAngle; // 현재 각도 업데이트
        OnFwd(MAC, 50); // 바퀴 회전

        if(Sensor(LR) < 400) // 광센서가 집을 인식할 경우
        {
          if(redFound == true) // 먹이를 먹었을 때
            PlaySound(SOUND_UP); // 소리 발생
          else if(redFound == false) // 먹이를 먹지 못했을 때
          {
            if(turnDir == false) // 지정한 회전 방향에 따라 회전
              RotateMotorEx(MAC, 40, 65, 100, 1, 1);
            else if(turnDir = true)
              RotateMotorEx(MAC, 40, 65, -100, 1, 1);
          }
          Off(MAC); // 모터 정지
          distance = 0; // 집으로 거리 재설정
          break;
        }
      }
      if(Sensor(LR) < 400) { break; } // 집에 귀환했을 때 후진 중지
      Off(MAC);
  }
}

sub Obstacle() // 장애물에 닿았을 때 동작
{
  Off(MB); // 팔 정지
  while(degree <= 0) // 팔 원위치
  {
    degree = Angle;
    OnFwd(MB, armPower);
  }
  Off(MB);
  Wait(100);

  redFound = false; // 먹이 위치 플래그 false 설정
}

sub Red() // 먹이 찾았을 때 동작
{
  Off(MB); // 팔 정지
  ColorShiftStart = degree; // 적색 시작 팔 각도 기록

  while(color == Sensor(CR)) // 적색 끝까지 탐색
  {
    degree = Angle;
    OnRev(MB, armPower);
    if(degree < -180) break;
  }

  Off(MB); // 팔 정지
  ColorShiftEnd = Angle; // 적색 끝 팔 각도 기록

  while(((ColorShiftStart + ColorShiftEnd) / 2) != degree) // 적색 중간 위치로 팔 이동
  {
    degree = Angle;
    OnFwd(MB, rtnArmPower);
  }

  Off(MB);
  Wait(300);
  PlaySound(SOUND_DOUBLE_BEEP); // 적색 인식
  redFound = true; // 플래그 설정
  redDistance = distance;

  while(degree <= 0) // 팔 원위치
  {
    degree = Angle;
    OnFwd(MB, armPower);
  }
  Off(MB);
}


task main()
{
  InitalSet(); // 초기 설정 서브루틴 호출

  while(1)
  {
    NumOut(0, 8, distance);

        while(degree > -180) // 스캔 개시
        {
          degree = Angle; // 현재 팔 각도 업데이트
          OnRev(MB, armPower); // 팔 구동
          color = Sensor(CR); // 컬러 센서 값 업데이트

          if(Sensor(TCH1) == 1 || Sensor(TCH2) == 1) // 터치 센서 반응 시
          {
            Obstacle(); // 장애물 반응 서브루틴 호출
            ReturnToBase(); // 집으로 귀환 서브루틴 호출
          }

          if(color == RED) // 적색 발견 시
          {
            Red(); // 적색 발견 동작 서브루틴 호출
            ReturnToBase(); // 집으로 귀환
          }

          else if(color == BLACK) // 경계 발견 시
          {
            Off(MB); // 팔 정지
            ColorShiftStart = degree; // 경계 시작 팔 각도 기록

            while(color == Sensor(CR) || Sensor(CR) == 3 || Sensor(CR) == 4) // 경계 끝까지 탐색
            {
              degree = Angle; // 팔 각도 업데이트
              OnRev(MB, armPower); // 팔 구동
              if(degree < -180) break;
              if(Sensor(TCH1) == 1 || Sensor(TCH2) == 1) // 구동 중 장애물 인식 시
              {
                Obstacle(); // 장애물 서브루틴 동작
                ReturnToBase(); // 집으로 귀환
                goto Forward; // 전진
                break;
              }
            }

            Off(MB); // 팔 정지
            ColorShiftEnd = Angle; // 경계 끝 팔 각도 기록

            while(((ColorShiftStart + ColorShiftEnd) / 2) != degree) // 경계 중간 위치로 팔 이동
            {
              degree = Angle;
              OnFwd(MB, rtnArmPower);
            }

            Off(MB);
            Wait(150);
            PlaySound(SOUND_DOWN); // 경계 인식

            while(degree > -180) // 경계 인식 후 끝까지 추가 탐색
            {
              degree = Angle;
              OnRev(MB, armPower);
              color = Sensor(CR);
              if(color == RED) // 적색 추가 발견 시
              {
                Red(); // 적색 발견 동작
                break;
              }
              else if(Sensor(TCH1) == 1 || Sensor(TCH2) == 1) // 장애물 인식 시
              {
                Obstacle(); // 장애물 동작
                break;
              }
              else
                redFound = false; // 아닐 경우 플래그 false로 설정
            }
            Off(MB);

            while(degree <= 0) // 팔 원위치
            {
              degree = Angle;
              OnFwd(MB, armPower);
            }
            Off(MB);
            Wait(100);
            ReturnToBase(); // 집으로 귀환
          }
        }

    while(degree <= 0) // 팔 원위치
    {
      degree = Angle;
      OnFwd(MB, armPower);
    }
    Off(MB);
    Wait(30);

    Forward:
    {
      RotateMotorEx(MAC, 60, -200, 0, 1, 1); // 앞으로 200도 전진
      distance += 1; // 이동 거리 증가
    }
  }
}
